package main

/* TODO:
 * When walking and recursive, print subdirectory sizes as well
   * The issue with this currently is that since getting the size means waiting
     on walking everything in that subdirectory (i.e., submitting new jobs),
     there's the possibility the subdirectory is so deep that all the workers
     get hung up waiting for subdirectories to finish calculating size but
     there are no more workers left available
*/

import (
	"container/list"
	"flag"
	"fmt"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"sync/atomic"
)

type SizeDenom uint64

func (sd *SizeDenom) Set(s string) error {
  switch strings.ToLower(s) {
  case "b":
    *sd = B
  case "kb":
    *sd = KB
  case "kib":
    *sd = KiB
  case "mb":
    *sd = MB
  case "mib":
    *sd = MiB
  case "gb":
    *sd = GB
  case "gib":
    *sd = GiB
  default:
    n, err := strconv.ParseUint(s, 0, 64)
    if err != nil {
      return err
    }
    *sd = SizeDenom(n)
  }
  return nil
}

func (sd SizeDenom) String() string {
  switch sd {
  case B:
    return "B"
  case KB:
    return "KB"
  case KiB:
    return "KiB"
  case MB:
    return "MB"
  case MiB:
    return "MiB"
  case GB:
    return "GB"
  case GiB:
    return "GiB"
  }
  return fmt.Sprintf("%d B", sd)
}

const (
  B SizeDenom = 1
  KB = 1_000
  KiB = 1 << 10
  MB = 1_000_000
  MiB = 1 << 20
  GB = 1_000_000_000
  GiB = 1 << 30
)

var (
  sizeDenom = B
  recursive = false
  total = false
  walk = false
  prec = -1

  size uint64
  totalSize uint64
  workerChan chan Job
  wg sync.WaitGroup
)

func main() {
  log.SetFlags(0)

  flag.Var(
    &sizeDenom, "size",
    "Size denomination (B/KB/KiB/MB/MiB/GB/GiB/Custom)",
  )
  flag.BoolVar(
    &recursive, "r", false,
    "If directory, get size of all subdirectories (recursive)",
  )
  flag.IntVar(
    &prec, "p", -1,
    "Precision of output decimals (-1 for no limit)",
  )
  flag.BoolVar(&total, "total", false, "Calculate the total size of all args")
  flag.BoolVar(&walk, "walk", false, "Print info of directory children")
  nWorkers := flag.Uint("workers", 1, "Number of workers to spawn (non-zero)")
  // Used only for when looping through the arguments since it can be passed
  // multiple times
  flag.String(
    "path", "", "Explicitly specify path (can be passed multiple times)",
  )
  boolFlags := map[string]bool{
    "r": true,
    "total": true,
    "walk": true,
  }

  // Print help
  if len(os.Args) == 2 && (os.Args[1] == "-h" || os.Args[1] == "--help") {
    flag.Parse()
  }
  var args, paths []string
  // Keeps track of whether the previous arg was a flag with a value yet to be
  // passed
  prevFlag := false
  for i, l := 1, len(os.Args); i < l; i++ {
    arg := os.Args[i]
    if prevFlag {
      prevFlag = false
      args = append(args, arg)
      continue
    } else if arg[0] != '-' {
      paths = append(paths, arg)
      continue
    }
    // Get the flag name
    name, value := "", ""
    l := len(arg)
    if l > 1 && arg[1] == '-' {
      name = arg[2:]
    } else {
      name = arg[1:]
    }
    // Split value from flag
    if index := strings.IndexByte(name, '='); index != -1 {
      name = name[:index]
      value = name[index+1:]
    } else {
      prevFlag = true
    }
    // Check if it is the path flag
    if name == "path" {
      if value != "" {
        // Add the value if it was defined with the flag
        paths = append(paths, value)
      } else if prevFlag {
        // Get the next arg (the value) if it exists
        if i != l - 1 {
          i++
          paths = append(paths, os.Args[i+1])
        } else {
          // If this is the last flag passed but no value is passed afterwards
          // (checked with `i != l - 1`), then throw an error. This can be done
          // by just including it in the arguments passed to Parse() since it
          // will throw an error when a flag is passed without a defined value.
          // We can break since we know it's the last arg
          args = append(args, arg)
          break
        }
      }
      prevFlag = false
      continue
    }
    // See if the flag is defined
    if flag.Lookup(name) != nil {
      args = append(args, arg)
      // No value will be defined in next arg if this is a boolean flag
      prevFlag = !boolFlags[name]
    } else {
      paths = append(paths, arg)
      prevFlag = false
    }
  }

  flag.CommandLine.Parse(args)
  if len(paths) == 0 {
    log.Fatal("must provide path")
  }

  if *nWorkers == 0 {
    log.Fatal("workers must be at least 1")
  }
  workerChan = make(chan Job, *nWorkers * 10)
  for ; *nWorkers != 0; (*nWorkers)-- {
    go worker()
  }

  for i, path := range paths {
    if i != 0 {
      fmt.Println(strings.Repeat("=", 40))
    }
    info, err := os.Stat(path)
    if err != nil {
      //log.Fatalf("error getting info: %v", err)
      log.Printf("error getting info: %v", err)
      continue
    }
    if !info.IsDir() {
      size = uint64(info.Size())
    } else {
      wg.Add(1)
      walkDir(path)
      wg.Wait()
    }
    printInfo(info, size)
    if total {
      totalSize += size
    }
    size = 0
  }
  if total {
    fmt.Println(strings.Repeat("=", 40))
    fmt.Println("Total Size:", makeSizeStr(totalSize))
  }
}

type Jobs struct {
  queue *list.List
  mtx sync.Mutex
}

func (jobs *Jobs) newJob(path string, sizePtr *uint64, wg *sync.WaitGroup) Job {
  return Job{
    jobs: jobs,
    path: path,
    sizePtr: sizePtr,
    wg: wg,
  }
}

func (jobs *Jobs) submitJob(job Job) {
  jobs.mtx.Lock()
  defer jobs.mtx.Unlock()
  jobs.queue.PushBack(job)
  jobs.lockedSendJobs()
}

func (jobs *Jobs) sendJobs() {
  jobs.mtx.Lock()
  jobs.lockedSendJobs()
  jobs.mtx.Unlock()
}

// Loops through the queue to see if any workers are available for new jobs
// Expects caller to hold jobs.mtx lock
func (jobs *Jobs) lockedSendJobs() {
  for elem := jobs.queue.Front(); elem != nil; {
    select {
    case workerChan <- elem.Value.(Job):
      next := elem.Next()
      jobs.queue.Remove(elem)
      elem = next
    default:
      return
    }
  }
}

type Job struct {
  jobs *Jobs
  path string
  sizePtr *uint64
  wg *sync.WaitGroup
}

func (job Job) withPath(path string) Job {
  job.path = path
  return job
}

func (job Job) resubmitWithPath(path string) {
  job.jobs.submitJob(job.withPath(path))
}

func (job Job) doJob() {
  defer job.done()
  path := job.path
  // Check to see if it's a file
  if info, err := os.Stat(path); err != nil {
    log.Printf("error getting info: %v", err)
    return
  } else if !info.IsDir() {
    size := uint64(info.Size())
    printInfo(info, size)
    if job.sizePtr != nil {
      atomic.AddUint64(job.sizePtr, size)
    }
    return
  }
  // Go through the directory entries
  ents, err := os.ReadDir(path)
  if err != nil {
    log.Printf("error opening %s: %v", path, err)
    return
  }
  for _, ent := range ents {
    newPath := filepath.Join(path, ent.Name())
    info, err := ent.Info()
    if err != nil {
      log.Printf("error getting info for %s: %v", newPath, err)
      continue
    }
    if !info.IsDir() {
      if walk {
        printInfo(info, uint64(info.Size()))
      }
      atomic.AddUint64(job.sizePtr, uint64(info.Size()))
    } else if recursive {
      job.resubmitWithPath(newPath)
    }
  }
}

func (job Job) done() {
  job.wg.Done()
  // Call this so that more jobs are sent when this one is done
  // Useful, for example, when there is only one worker, so that this will
  // queue up the next job for that worker
  job.jobs.sendJobs()
}

func doPath(path string) {
  size, wg := uint64(0), sync.WaitGroup{}
  submitJob(Job{path: path, sizePtr: &size, wg: &wg})
  wg.Wait()
  if total {
    atomic.AddUint64(&totalSize, size)
  }
}

func worker() {
  for {
    job := <-workerChan
    job.doJob()
  }
}

func walkDir(path string) {
  defer wg.Done()
  ents, err := os.ReadDir(path)
  if err != nil {
    log.Printf("error opening %s: %v", path, err)
    return
  }
  for _, ent := range ents {
    info, err := ent.Info()
    if err != nil {
      log.Printf("error getting info for %s: %v", filepath.Join(path, ent.Name()), err)
      continue
    }
    if !info.IsDir() {
      atomic.AddUint64(&size, uint64(info.Size()))
      continue
    } else if recursive {
      wg.Add(1)
      go walkDir(filepath.Join(path, ent.Name()))
    }
  }
}

func walkDir2(path string) uint64 {
  dirSize := uint64(0)
  ents, err := os.ReadDir(path)
  if err != nil {
    log.Printf("error opening %s: %v", path, err)
    return 0
  }
  for _, ent := range ents {
    info, err := ent.Info()
    if err != nil {
      log.Printf("error getting info for %s: %v", filepath.Join(path, ent.Name()), err)
      continue
    }
    if !info.IsDir() {
      dirSize += uint64(info.Size())
      continue
    } else if recursive {
      dirSize += walkDir2(filepath.Join(path, ent.Name()))
    }
  }
  return dirSize
}

func printInfo(info fs.FileInfo, size uint64) {
  sizeStr := makeSizeStr(size)
  fmt.Printf(
    "%s\nSize: %s\nLast Mod: %s\n",
    info.Name(), sizeStr, info.ModTime().Format("15:04 Jan 02, 2006"),
  )
}

func makeSizeStr(size uint64) (sizeStr string) {
  switch sizeDenom {
  case B:
    sizeStr = commas(size) + " B"
  case KB:
    sizeStr = commas(size / KB)
    if rem := size % KB; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(KB), 'f', prec, 64)[1:]
    }
    sizeStr += " KB"
  case KiB:
    sizeStr = commas(size / KiB)
    if rem := size % KiB; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(KiB), 'f', prec, 64)[1:]
    }
    sizeStr += " KiB"
  case MB:
    sizeStr = commas(size / MB)
    if rem := size % MB; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(MB), 'f', prec, 64)[1:]
    }
    sizeStr += " MB"
  case MiB:
    sizeStr = commas(size / MiB)
    if rem := size % MiB; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(MiB), 'f', prec, 64)[1:]
    }
    sizeStr += " MiB"
  case GB:
    sizeStr = commas(size / GB)
    if rem := size % GB; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(GB), 'f', prec, 64)[1:]
    }
    sizeStr += " GB"
  case GiB:
    sizeStr = commas(size / GiB)
    if rem := size % GiB; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(GiB), 'f', prec, 64)[1:]
    }
    sizeStr += " GiB"
  default:
    sd := uint64(sizeDenom)
    sizeStr = commas(size / sd)
    if rem := size % sd; rem != 0 {
      sizeStr += strconv.FormatFloat(float64(rem) / float64(sd), 'f', prec, 64)[1:]
    }
    sizeStr += fmt.Sprintf(" /%d B", sd)
  }
  return
}

func commas(u uint64) string {
  numStr := strconv.FormatUint(u, 10)
  str := ""
  // Track when to place comma with cc
  for i, cc := len(numStr) - 1, -1; i >= 0; i-- {
    cc++
    if cc == 3 {
      str, cc = "," + str, 0
    }
    str = string(numStr[i]) + str
  }
  return str
}

func submitJob(job Job) {
  job.wg.Add(1)
  workerChan <- job
}
